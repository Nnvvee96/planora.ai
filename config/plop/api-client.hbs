/**
 * {{pascalCase name}} API Client
 *
 * Client for connecting to external AI services.
 * Implements proper error handling, retries, and security patterns.
 */

import { {{pascalCase name}}Request } from '../types';

class {{pascalCase name}}ApiClient {
  private apiKey: string;
  private baseUrl: string;
  
  constructor() {
    // In production, these would come from environment variables
    this.apiKey = process.env.{{constantCase name}}_API_KEY || '';
    this.baseUrl = process.env.{{constantCase name}}_API_URL || 'https://api.example.com';
    
    if (!this.apiKey) {
      console.warn('{{pascalCase name}} API key not configured');
    }
  }
  
  async callExternalApi(request: {{pascalCase name}}Request) {
    try {
      // This is where you'd implement the actual API call
      // Using fetch, axios, or another HTTP client
      
      // Example implementation with fetch:
      // const response = await fetch(`${this.baseUrl}/process`, {
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //     'Authorization': `Bearer ${this.apiKey}`
      //   },
      //   body: JSON.stringify(request)
      // });
      // 
      // if (!response.ok) {
      //   throw new Error(`API error: ${response.status}`);
      // }
      // 
      // return await response.json();
      
      // Placeholder implementation
      return {
        id: 'mock-external-id',
        result: 'Mock external API result',
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('External API error:', error);
      throw error;
    }
  }
}

// Singleton instance
let instance: {{pascalCase name}}ApiClient | null = null;

// Factory function
export function get{{pascalCase name}}ApiClient(): {{pascalCase name}}ApiClient {
  if (!instance) {
    instance = new {{pascalCase name}}ApiClient();
  }
  return instance;
}
