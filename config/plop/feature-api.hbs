/**
 * {{name}} Feature API
 * 
 * Public API boundary for {{name}}-related functionality.
 * Follows Planora's architectural principles with feature-first organization.
 * 
 * @module features/{{name}}/{{name}}Api
 * @category Feature APIs
 * 
 * IMPORTANT ARCHITECTURAL RULES:
 * 1. This file exports ONLY what should be accessible to other parts of the application
 * 2. NO INTERNAL IMPLEMENTATION DETAILS should be exposed
 * 3. Use NAMED EXPORTS ONLY - never default exports
 * 4. Export both component and its types together
 * 5. Feature APIs should not import from other features' internals
 */

// Import types from the feature's type file
import { {{pascalCase name}}State, {{pascalCase name}}Config } from './types';

// =======================================
// TYPE EXPORTS
// =======================================
// Export types that should be available to other features
export type { {{pascalCase name}}State, {{pascalCase name}}Config };

// =======================================
// COMPONENT EXPORTS
// =======================================
// Export components that should be accessible outside this feature
// Example: export { ComponentName } from './components/ComponentName';

// =======================================
// HOOK EXPORTS
// =======================================
// Export hooks that provide feature functionality to the rest of the app
// Example: export { use{{pascalCase name}} } from './hooks/use{{pascalCase name}}';

// =======================================
// SERVICE/FACTORY EXPORTS
// =======================================
// Export factory functions that create instances of services
// Example: export { create{{pascalCase name}}Service } from './services/{{name}}Service';

// =======================================
// AI-SPECIFIC EXPORTS (if applicable)
// =======================================
/**
 * For AI features, consider exporting:
 * 1. Model version information and capabilities
 * 2. Interfaces for prompting and responses
 * 3. Progress/status monitoring utilities
 * 4. Error handling and fallback mechanisms
 * 5. Ethics and privacy compliance tools
 */
// Example: export { get{{pascalCase name}}AICapabilities } from './services/{{name}}AIService';

// =======================================
// UTILITY EXPORTS
// =======================================
// Export utility functions that might be needed by other features
// Example: export { format{{pascalCase name}}Data } from './utils/formatters';

// =======================================
// DO NOT EXPORT INTERNAL IMPLEMENTATION DETAILS
// =======================================
